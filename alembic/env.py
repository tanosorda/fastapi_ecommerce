import os
import sys
import asyncio
from logging.config import fileConfig
from alembic import context
from dotenv import load_dotenv

# üîÅ –°–Ω–∞—á–∞–ª–∞ –≥—Ä—É–∑–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ sys.path
load_dotenv()

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# ‚¨áÔ∏è –¢–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—ë –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
from app.db.database import Base, engine
from app.models import models  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∑–¥–µ—Å—å –µ—Å—Ç—å —Ç–≤–æ–∏ SQLAlchemy-–º–æ–¥–µ–ª–∏

# Alembic config
config = context.config
fileConfig(config.config_file_name)

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º asyncpg URI –≤ sync
raw = os.getenv("POSTGRES_URL")
if not raw:
    raise RuntimeError("POSTGRES_URL is not set in .env")
sync_url = raw.replace("+asyncpg", "")
config.set_main_option("sqlalchemy.url", sync_url)

# –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è Alembic
target_metadata = Base.metadata

def do_run_migrations(connection):
    context.configure(
        connection=connection,
        target_metadata=target_metadata,
        compare_type=True,
        compare_server_default=True,
    )

    with context.begin_transaction():
        context.run_migrations()

async def run_async_migrations():
    async with engine.begin() as conn:
        await conn.run_sync(do_run_migrations)

def run_migrations_online():
    asyncio.run(run_async_migrations())

# üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
run_migrations_online()
